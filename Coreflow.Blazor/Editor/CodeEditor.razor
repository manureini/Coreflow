

<MonacoEditor @ref="mEditor" Id=@mId ConstructionOptions="EditorConstructionOptions" CssClass=@("cf-code-editor-monaco "  + (IsInline ? "cf-code-editor-monaco-inline" : "cf-code-editor-monaco-fullscreen")) OnDidChangeModelContent="OnCodeChanged" />


@code {

    private string mCurrentDisplayedCode;

    [Parameter]
    public string Code { get; set; }

    [Parameter]
    public EventCallback<string> CodeChanged { get; set; }

    [Parameter]
    public bool IsInline { get; set; }

    protected MonacoEditor mEditor;
    protected string mId;

    protected System.Timers.Timer mTimer;

    protected override void OnInitialized()
    {
        mId = Guid.NewGuid().ToString();

        mTimer = new System.Timers.Timer();
        mTimer.Interval = 250;
        mTimer.Elapsed += SendCodeChanged;
        mTimer.AutoReset = false;
    }

    protected override void OnParametersSet()
    {
        Code ??= string.Empty;

        if (Code != mCurrentDisplayedCode)
        {
            mCurrentDisplayedCode = Code;

            if (mEditor != null)
                _ = mEditor.SetValue(Code);
        }
    }

    protected StandaloneEditorConstructionOptions EditorConstructionOptions(MonacoEditor editor)
    {
        var options = new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "csharp",
            Theme = "vs-dark",
            GlyphMargin = true,
            ScrollBeyondLastLine = false,
            Value = mCurrentDisplayedCode,
        };

        if (IsInline)
        {
            options.Contextmenu = false;
            options.Minimap = new EditorMinimapOptions()
            {
                Enabled = false
            };
            options.LineNumbers = "off";
            options.GlyphMargin = false;
            options.Folding = false;
            options.LineDecorationsWidth = "0";
            options.LineNumbersMinChars = 0;

            options.Scrollbar = new EditorScrollbarOptions()
            {
                HorizontalScrollbarSize = 0,
                VerticalScrollbarSize = 0
            };
        }

        return options;
    }

    protected void OnCodeChanged(ModelContentChangedEvent pArgs)
    {
        mTimer.Stop();
        mTimer.Start();
    }

    protected void SendCodeChanged(object source, System.Timers.ElapsedEventArgs e)
    {
        _ = InvokeAsync(async () =>
        {
            mTimer.Stop();
            mCurrentDisplayedCode = await mEditor.GetValue();
            _ = CodeChanged.InvokeAsync(mCurrentDisplayedCode);
        });
    }
}