@if (DropZoneEnabled && !PreviousCodeCreatorIsSelected && CodeCreator != FlowDefinition.CodeCreator)
{
    <div class="cf-code-creator-dropzone" @ondrop="OnDropBefore" ondragover="event.preventDefault();"></div>
}

@if (CodeCreator != null)
{
    <div class=@CssClass style=@CssStyle title=@CodeCreator.GetType().FullName
     @onclick=OnClick @onclick:stopPropagation @onclick:preventDefault
     draggable="true"
     @ondragstart="OnDragStart" @ondragstart:stopPropagation
     @ondragend="OnDragEnd" @ondragend:stopPropagation
     @onkeydown="OnKeyDown" @onkeydown:stopPropagation tabindex="0">

        <div class="cf-code-creator-title">
            <span class="cf-code-creator-title-left">
                <i class=@IconCssClass></i>
                <input type="text" class="cf-code-creator-input-display-name" spellcheck="false" value="@DisplayName" @onchange="OnDisplayNameChange" @onkeydown:stopPropagation />
            </span>
            <span class="cf-code-creator-title-right">
                @if (UserNote != null)
                {
                    <a class="cf-code-creator-note" href="#" tabindex="0">
                        <i class="fa-solid fa-note-sticky"></i>
                    </a>
                }
            </span>
        </div>

        @if (CodeCreator is ICodeCreatorContainerCreator containerCreator)
        {
            <div class="cf-code-creator-sequence-container">

                @for (int i = 0; i < containerCreator.SequenceCount; i++)
                {
                    <div class="cf-code-creator-sequence">

                        @{
                            ICodeCreator lastCodeCreator = null;
                        }

                        @if (containerCreator.CodeCreators != null && containerCreator.CodeCreators.Count > i)
                        {
                            @foreach (var creator in containerCreator.CodeCreators[i])
                            {
                                var prevIsSelected = lastCodeCreator != null && lastCodeCreator == FlowEditor.SelectedCodeCreator;
                                lastCodeCreator = creator;

                                <DefaultCodeCreatorEditor FlowDefinition="FlowDefinition" CodeCreator="creator" PreviousCodeCreatorIsSelected="prevIsSelected" />
                            }
                        }

                        @if (DropZoneEnabled && (FlowEditor.SelectedCodeCreator == null || lastCodeCreator != FlowEditor.SelectedCodeCreator))
                        {
                            int sequenceIndex = i;
                            <div class="cf-code-creator-dropzone" @ondrop="async () => await OnDrop(containerCreator, sequenceIndex)" ondragover="event.preventDefault();"></div>
                        }

                    </div>
                }

            </div>
        }

    </div>
}
else if (CodeCreator == null && FlowDefinition.CodeCreator == null)
{
    <div class="cf-code-creator-dropzone" @ondrop="OnDropRoot" ondragover="event.preventDefault();"></div>
}


@code {

    [Parameter]
    public FlowDefinition FlowDefinition { get; set; }

    [Parameter]
    public ICodeCreator CodeCreator { get; set; }


    public bool DropZoneEnabled
    {
        get
        {
            return FlowEditor.DropZonesVisible && !(CodeCreator == FlowEditor.SelectedCodeCreator);
        }
    }

    [Parameter]
    public bool PreviousCodeCreatorIsSelected { get; set; }

    [CascadingParameter]
    public FlowEditor FlowEditor { get; set; }


    protected string DisplayName { get; set; }
    protected string IconCssClass { get; set; }

    protected string UserColor { get; set; }
    protected string UserNote { get; set; }

    protected string CssStyle
    {
        get
        {
            if (UserColor != null)
            {
                return "background: " + UserColor;
            }

            return string.Empty;
        }
    }

    protected string CssClass
    {
        get
        {
            string ret = "cf-code-creator";

            if (FlowEditor.SelectedCodeCreator == CodeCreator)
            {
                ret += " cf-code-creator-active";
            }

            return ret;
        }
    }

    protected override void OnParametersSet()
    {
        if (CodeCreator == null)
            return;

        DisplayName = CodeCreator.GetDisplayName(FlowDefinition);
        IconCssClass = CodeCreator.GetIconClassName();

        UserColor = FlowDefinition.GetMetadata(CodeCreator.Identifier, Constants.USER_COLOR) as string;
        UserNote = FlowDefinition.GetMetadata(CodeCreator.Identifier, Constants.USER_NOTE) as string;
    }

    protected void OnDisplayNameChange(ChangeEventArgs args)
    {
        DisplayName = (string)args.Value;
        FlowDefinition.SetMetadata(CodeCreator.Identifier, Constants.USER_DISPLAY_NAME, DisplayName);
    }

    protected Task OnClick()
    {
        return FlowEditor.OnSelectCodeCreator(CodeCreator);
    }

    protected void OnDragStart(DragEventArgs pArgs)
    {
        pArgs.DataTransfer.DropEffect = "move";
        pArgs.DataTransfer.EffectAllowed = "move";
        FlowEditor.ShowDropZones();
    }

    protected void OnDragEnd()
    {
        FlowEditor.HideDropZones();
    }

    protected Task OnDropBefore()
    {
        return FlowEditor.MoveSelectedCodeCreatorBefore(CodeCreator);
    }

    protected Task OnDrop(ICodeCreatorContainerCreator pContainer, int pSequence)
    {
        return FlowEditor.MoveSelectedCodeCreatorIn(pContainer, pSequence);
    }

    protected Task OnDropRoot()
    {
        return FlowEditor.SetSelectedCodeCreatorAsRoot();
    }

    protected void OnKeyDown(KeyboardEventArgs pArgs)
    {
        FlowEditor.SelectedCodeCreator = CodeCreator;

        if (pArgs.Key == "Delete")
        {
            FlowEditor.RemoveSelectedCodeCreator();
        }
    }

}
