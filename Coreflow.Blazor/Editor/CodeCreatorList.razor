<div class="cf-code-creator-list">

    @foreach (var grouped in mAllCodeCreators.GroupBy(c => c.codecreator is IUiDesignable cd ? cd.Category : null).OrderBy(g => g.Key))
    {
        <h6 class="cf-code-creator-list-category cf-category-title">@(string.IsNullOrWhiteSpace(grouped.Key) ? "None" : grouped.Key)</h6>
        @foreach (var entry in grouped.Select(g => (factory: g.factory, codeCreator: g.codecreator, displayName: g.codecreator.GetDisplayName())).OrderBy(c => c.displayName))
        {
            <div class="cf-code-creator"
                 draggable="true"
                 @ondragstart="(args) => OnDragStart(args, entry.factory)" @ondragstart:stopPropagation
                 @ondragend="OnDragEnd" @ondragend:stopPropagation>
                <i class="@entry.codeCreator.GetIconClassName()"></i><span class="displayname">@entry.displayName</span>
            </div>
        }
    }

</div>

@code {

    [Parameter]
    public Coreflow.Storage.CodeCreatorStorage CodeCreatorStorage { get; set; }

    [CascadingParameter]
    public FlowEditor FlowEditor { get; set; }

    protected (ICodeCreatorFactory factory, ICodeCreator codecreator)[] mAllCodeCreators;

    protected override void OnParametersSet()
    {
        mAllCodeCreators = CodeCreatorStorage.GetAllFactories().Select(f => (f, f.Create())).ToArray();
    }

    protected void OnDragStart(DragEventArgs pArgs, ICodeCreatorFactory pCodeCreatorFactory)
    {
        pArgs.DataTransfer.DropEffect = "move";
        pArgs.DataTransfer.EffectAllowed = "move";

        Type[] customTypes = null;

        if(pCodeCreatorFactory.OverrideableCustomTypes != null)
        {
            customTypes = pCodeCreatorFactory.OverrideableCustomTypes;

            for(int i = 0; i < customTypes.Length; i++)
            {
              //  customTypes[i] = typeof(string);
            }
        }

        var codeCreator = pCodeCreatorFactory.Create(customTypes);

        if (codeCreator is IParametrized parametrized)
        {
            parametrized.Arguments = new List<IArgument>();

            foreach (var parameter in parametrized.GetParameters())
            {
                var argument = Coreflow.Helper.ArgumentHelper.CreateArgument(parameter);
                parametrized.Arguments.Add(argument);
            }
        }

        FlowEditor.SelectedCodeCreator = codeCreator;
        FlowEditor.ShowDropZones(codeCreator);
    }

    protected void OnDragEnd()
    {
        Task.Run(async () =>
        {
            FlowEditor.SelectedCodeCreator = null;
            await Task.Delay(500);
            FlowEditor.HideDropZones();
        });
    }

}